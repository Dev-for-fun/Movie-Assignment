*{
    margin:0;
    padding:0;
    box-sizing: border-box;
}
/* 

import React, { useState, useEffect, useCallback } from 'react';
import debounce from 'lodash.debounce';

const API_URL = 'http://localhost:8000/api/movies'; // Replace with your actual API URL

const TablePage = () => {
  const [records, setRecords] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRecords = async () => {
      try {
        const response = await fetch(API_URL);
        const data = await response.json();
        setRecords(data);
        setLoading(false);
      } catch (error) {
        setError(error.message);
        setLoading(false);
      }
    };

    fetchRecords();
  }, []);

  const handleInputChange = useCallback((index, field, value) => {
    const newRecords = [...records];
    newRecords[index][field] = value;
    setRecords(newRecords);
    updateRecord(newRecords[index]);
  }, [records]);

  const updateRecord = useCallback(
    debounce(async (record) => {
      try {
        await fetch(`${API_URL}/${record.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(record),
        });
      } catch (error) {
        setError(error.message);
      }
    }, 300),
    []
  );

  const handleAddRow = async () => {
    const newRecord = { title: '', genres: '', year: '', rating: '', rottenTomato: '' };
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newRecord),
      });
      const addedRecord = await response.json();
      setRecords([...records, addedRecord]);
    } catch (error) {
      setError(error.message);
    }
  };

  const handleDeleteRow = async (index) => {
    const recordToDelete = records[index];
    try {
      await fetch(`${API_URL}/${recordToDelete.id}`, {
        method: 'DELETE',
      });
      setRecords(records.filter((_, i) => i !== index));
    } catch (error) {
      setError(error.message);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div>
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Genres</th>
            <th>Year</th>
            <th>Rating</th>
            <th>RottenTomato</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {records.map((record, index) => (
            <tr key={index}>
              {Object.keys(record).map((key) => (
                key !== 'id' && (
                  <td key={key}>
                    <input
                      type="text"
                      value={record[key]}
                      onChange={(e) => handleInputChange(index, key, e.target.value)}
                    />
                  </td>
                )
              ))}
              <td>
                <button onClick={() => handleDeleteRow(index)}>Delete</button>
              </td>
            </tr>
          ))}
          <tr>
            <td colSpan="6">
              <button onClick={handleAddRow}>Add Row</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default TablePage; */
